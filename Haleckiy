#include <iostream>
#include <locale.h>
#include <stdio.h>
#include <math.h>
#include <ctime>
#include <cstdlib>
#include <iomanip>

using namespace std;

const unsigned n=3;
float b;
unsigned k;

float** create_matrix (unsigned n)
{
    cout << "input Matrix: "<< endl;

    float ** mat = new float* [n];
    for (unsigned i = 0; i < n; i++)
        mat[i] = new float[n+1];

    mat[0][0]= 5;
    mat[0][1]= 3;
    mat[0][2]= -1;
    mat[0][3]= 8;


    mat[1][0]= 2;
    mat[1][1]= -1;
    mat[1][2]= 1;
    mat[1][3]= 6;


    mat[2][0]= 4;
    mat[2][1]= 1;
    mat[2][2]= -1;
    mat[2][3]= 2;


//    mat[0][0]= -0.02;
//    mat[0][1]= -0.66;
//    mat[0][2]= 0.46;
//    mat[0][3]= 0.62;
//    mat[0][4]=0.83;
//    mat[0][5]=0.24;


//    mat[1][0]= 0.52;
//    mat[1][1]= -0.59;
//    mat[1][2]= -0.46;
//    mat[1][3]= 0.63;
//    mat[1][4]= -0.68;
//    mat[1][5]= -0.98;


//    mat[2][0]= 0.28;
//    mat[2][1]= -0.8;
//    mat[2][2]= -0.24;
//    mat[2][3]= -0.51;
//    mat[2][4]= 0.98;
//    mat[2][5]= -0.94;


//    mat[3][0]= 0.38;
//    mat[3][1]= -0.97;
//    mat[3][2]= -0.46;
//    mat[3][3]= 0.27;
//    mat[3][4]= -0.45;
//    mat[3][5]= -0.84;


//    mat[4][0]= 0.17;
//    mat[4][1]= 0.33;
//    mat[4][2]= -0.28;
//    mat[4][3]= -0.94;
//    mat[4][4]= -0.92;
//    mat[4][5]= -0.79;

    return mat;

}

void print_matrix(float** &mat,unsigned n)
{
    for (unsigned i = 0; i < n; i++)
    {
        for (unsigned j = 0; j < n+1; j++)
        {
            cout << setprecision(4) << setw(8)<< mat[i][j]<< "  ";
        }
        cout<< endl;
    }
}

void delete_matrix(float** &mat,unsigned n)
{
    for (unsigned i=0 ;i<n;i++)
      {
        delete [] mat[i];
      }
    delete [] mat;
}

void haleckiy(float** &matrix, unsigned n)
{
    float ** T = new float* [n];
    for (unsigned i = 0; i < n; i++)
        T[i] = new float[n];

    float ** B = new float* [n];
    for (unsigned i = 0; i < n; i++)
        B[i] = new float[n];

    float * C = new float [n];

    float * y = new float [n];

    float * x = new float [n];

    for (unsigned i=0; i < n; i++ )
    {
        C[i]=matrix[i][n];
    }

    float b=0;

     float sum1=0;
     float sum2=0;
     float sum3=0;
     float sum4=0;

for (unsigned i=0; i < n; i++)
{
    for (unsigned j=1; j < n; j++)
    {
        if (matrix[1][1]==0)
        {
            {
              for (unsigned i=0; i<n; i++)
                {
                  if (matrix[i][0]!=0)
                    {
                      for (unsigned j=0; j<n+1; j++)
                        {
                          b = matrix[0][j];
                          matrix[0][j] = matrix[i][j];
                          matrix[i][j] = b;
                        }
                       break;
                     }
                 }
             }
           cout << endl;
        }
       B[0][i]=matrix [0][i];
       T[j][0]= matrix[0][j]/B[0][0];
    }
   }
    for (unsigned k=1; k < n; k++)
    {
        for (unsigned i=k; i < n; i++)
        {

            for (unsigned m =1; m < k; m++)
            {
                sum1+=B[m][i]*T[k][m];
            }
           B[k][i]=matrix[k][i]-sum1;
         }
            for (unsigned j=k+1; j < n; j++)
            {
                if (k== n-1)
                {
                    break;
                }
                for (unsigned m =0; m < k; m++)
                {
                    sum2+=B[m][k]*T[j][m];
                }

               T[j][k]=(1/B[k][k])*(matrix[j][k]-sum2);
            }
      }

    y[1]=C[1]/B[1][1];

    for (unsigned i=1; i<n; i++)
    {
     for (unsigned m=0; m<i; m++)
     {
       sum3+=B[m][i]*y[m];
     }
     y[i]=(1/B[i][i])*(C[i]-sum3);
    }

    x[n]=y[n];

    for (int i=n-1; i>=0; i--)
    {
      for (unsigned m=i; m<n-1; m++)
      {
          sum4+=T[m][i]*x[m];
      }
      x[i]= y[i]-sum4;
    }

    for (unsigned i = 0; i<n; i++)
           {
              cout<<"x"<<i+1<<": "<< x[i] <<endl;
           }

}


int main()
{
    float** a = create_matrix(n);
    print_matrix(a,n);
    haleckiy(a,n);
    delete_matrix(a,n);
    system("pause");
    return 0;
    }


